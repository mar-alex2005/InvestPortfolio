@model Invest.WebApp.Models.CacheViewModel
@using DevExtreme.AspNet.Mvc
@using Invest.Core.Enums
@using Invest.WebApp.Models
@{
	Layout = null;
	ViewData["Title"] = "Home Page";

    var cacheIn = Model.Operations.Where(x => x.Type == OperationType.BrokerCacheIn).ToList();

	var cacheInIis = cacheIn.Where(x => x.AccountType == AccountType.Iis).Sum(x => x.Summa);
	var cacheInVbr = cacheIn.Where(x => x.AccountType == AccountType.VBr).Sum(x => x.Summa);
	var cacheInTotal = cacheIn.Sum(x => x.Summa);

	var cacheInIisBuy = Model.Operations.Where(x => x.AccountType == AccountType.Iis && x.Currency == Currency.Rur && x.Type == OperationType.Buy).Sum(x => x.Price * x.Qty);
	var cacheInVbrBuy = Model.Operations.Where(x => x.AccountType == AccountType.VBr && x.Currency == Currency.Rur && x.Type == OperationType.Buy).Sum(x => x.Price * x.Qty);

	var cacheInIisSell = Model.Operations.Where(x => x.AccountType == AccountType.Iis && x.Currency == Currency.Rur && x.Type == OperationType.Sell).Sum(x => x.Price * x.Qty);
	var cacheInVbrSell = Model.Operations.Where(x => x.AccountType == AccountType.VBr && x.Currency == Currency.Rur && x.Type == OperationType.Sell).Sum(x => x.Price * x.Qty);

	var rurComm = Model.Operations.Where(x => (x.Type == OperationType.Buy || x.Type == OperationType.Sell)
		    && x.Currency == Currency.Rur
		    && x.Stock != null && x.Stock.Currency == Currency.Rur)
	    .ToList();

	var rurCommIis = rurComm.Where(x => x.AccountType == AccountType.Iis).Sum(x => x.Commission ?? 0m);
	var rurCommVbr = rurComm.Where(x => x.AccountType == AccountType.VBr).Sum(x => x.Commission ?? 0m);


	var rurDivs = Model.Operations.Where(x => x.Type == OperationType.Dividend && x.Currency == Currency.Rur);
	var rurDivsIis = rurDivs.Where(x => x.AccountType == AccountType.Iis).Sum(x => x.Summa);
	var rurDivsVbr = rurDivs.Where(x => x.AccountType == AccountType.VBr).Sum(x => x.Summa);

	var rurNdflIis = Model.Operations.Where(x => x.AccountType == AccountType.Iis && x.Type == OperationType.Ndfl && x.Currency == Currency.Rur).Sum(x => x.Summa);
	var rurNdflVbr = Model.Operations.Where(x => x.AccountType == AccountType.VBr && x.Type == OperationType.Ndfl && x.Currency == Currency.Rur).Sum(x => x.Summa);

	var usdBuyVbr = Model.Operations.Where(x => x.AccountType == AccountType.VBr && x.Type == OperationType.CurBuy && x.Currency == Currency.Usd).Sum(x => x.Summa);
	var usdSellVbr = Model.Operations.Where(x => x.AccountType == AccountType.VBr && x.Type == OperationType.CurSell && x.Currency == Currency.Usd).Sum(x => x.Summa);
}

<table class="tbl-cache-main">
<tr>
<td>
    <div id="divOperCache" style="overflow-y: scroll;">
        <table class="tbl-oper-cache">
        <tr>
            <th>Дата</th>
            <th>Сумма</th>
            <th>Cur</th>
            <th>Прим.</th>
        </tr>
        @{  
            var lastday = DateTime.MinValue;
            var lastBgColor = "white";

            foreach (var o in Model.Operations
                   .Where(x => x.Type == OperationType.BrokerCacheIn
                           || x.Type == OperationType.BrokerCacheOut
                           || x.Type == OperationType.Ndfl)
                   .OrderByDescending(x => x.Date).ThenByDescending(x => x.Index))
            {
                var sColor = "darkgreen";
                var bgColor = "white";
                if (o.Type == OperationType.BrokerCacheOut) {
                    sColor = "navy";
                }

                if (o.Date != lastday)
                {
                    bgColor = (lastBgColor == "white" ? "yellow" : "white");
                }

                <tr style="background-color: @bgColor;">
                    <td class="td-date">@($"{o.Date:dd.MM.yyyy}")</td>
                    <td class="td-summa" title="@o.Comment (acc: @o.Account.BrokerName)" style="text-align:right; color:@sColor;">@($"{o.Summa:N2}")</td>
                    <td class="td-type">@o.Currency</td>
                    <td class="td-type">@o.Type.ToString()</td>
                </tr>

                lastday = o.Date;
                lastBgColor = bgColor;
            }
        }
        </table>
    </div>
</td>
    <td>
        <table>
        <tr>
            <td>
                <table class="tbl-cache-acc">
                    <caption>По счетам:</caption>
                    <tr>
                        <th></th>
                        @foreach (var a in Model.Accounts)
                        {
                            <th title="@a.Name">@a.BrokerName</th>
                        }
                        <th>Итого</th>
                    </tr>
                    <tr>
                        <td></td>
                        @{
                            foreach (var a in Model.Accounts)
                            {
                                var accountCacheIn = Model.Operations
                                    .Where(x => x.Type == OperationType.BrokerCacheIn && x.Currency == Currency.Rur && x.Account == a)
                                    .Sum(x => x.Summa);

                                <td class="acc-total">@($"{accountCacheIn:N2}")</td>
                            }

                            var totalCacheIn = Model.Operations
                                .Where(x => x.Type == OperationType.BrokerCacheIn && x.Currency == Currency.Rur)
                                .Sum(x => x.Summa);
                        }
                        <td class="acc-total-all">@($"{totalCacheIn:N2}")</td>
                    </tr>
                    @{
                        foreach (var p in Invest.Core.Builder.GetPeriods())
                        {
                            <tr>
                                <td class="td-1">@p.Name</td>
                                @{
                                    foreach (var a in Model.Accounts)
                                    {
                                        var accountCacheIn = Model.Operations
                                            .Where(x => x.Type == OperationType.BrokerCacheIn && x.Currency == Currency.Rur
                                                        && x.Account == a && x.Date.Year == p.Year && x.Date.Month == p.Month)
                                            .Sum(x => x.Summa);

                                        <td>@($"{accountCacheIn:N2}")</td>
                                    }

                                    var accountCacheInTotal = Model.Operations
                                        .Where(x => x.Type == OperationType.BrokerCacheIn && x.Currency == Currency.Rur
                                            && x.Date.Year == p.Year && x.Date.Month == p.Month)
                                        .Sum(x => x.Summa);
                                }
                                <td>@($"{accountCacheInTotal:N2}")</td>
                            </tr>
                        }
                    }
                </table><br />
            </td>
        </tr>
        <tr>
            <td>
                <div style="border: 1px solid lightgrey; background-color:  #f0f0f0; padding: 7px;">
                    <div style="border: 1px solid lightgrey; background-color: white; padding: 14px; ">
                        @(Html.DevExtreme().Chart().ID("chartCache"))
                    </div>
                </div>
                <br />
            </td>
        </tr>
        <tr>
            <td>
                <table class="tbl-h">
                    <tr>
                        <th></th>
                        @foreach (var a in Model.Accounts)
                        {
                            <th>@a.BrokerName (@a.Id)</th>
                        }
                        <th>Total</th>
                    </tr>
                    <tr>
                        <td>CacheIn:</td>
                        <td class="td-cache">@($"{cacheInIis:N2}")</td>
                        <td class="td-cache">@($"{cacheInVbr:N2}")</td>
                        <td class="td-cache-total">@($"{cacheInTotal:N2}")</td>
                    </tr>
                    <tr>
                        <td>Buys:</td>
                        <td class="td-cache-buy">@string.Format("{0:N2}", cacheInIisBuy)</td>
                        <td class="td-cache-buy">@string.Format("{0:N2}", cacheInVbrBuy)</td>
                        <td class="td-cache-total">@string.Format("{0:N2}", (cacheInIisBuy ?? 0) + (cacheInVbrBuy ?? 0))</td>
                    </tr>
                    <tr>
                        <td>Sells:</td>
                        <td class="td-cache-sell">@string.Format("{0:N2}", cacheInIisSell)</td>
                        <td class="td-cache-sell">@string.Format("{0:N2}", cacheInVbrSell)</td>
                        <td class="td-cache-total">@string.Format("{0:N2}", (cacheInIisSell ?? 0) + (cacheInVbrSell ?? 0))</td>
                    </tr>
                    <tr>
                        <td>Delta:</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisBuy - (cacheInIisSell ?? 0))</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInVbrBuy - (cacheInVbrSell ?? 0))</td>
                        <td></td>
                    </tr>
                    @{
                        var cacheInIisSaldo = cacheInIis - (cacheInIisBuy - (cacheInIisSell ?? 0));
                        var cacheInVbrSaldo = cacheInVbr - (cacheInVbrBuy - (cacheInVbrSell ?? 0));
                    }
                    <tr>
                        <td>Saldo:</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInVbrSaldo)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo + cacheInVbrSaldo)</td>
                    </tr>
                    <tr>
                        <td>Comm:</td>
                        <td class="td-cache-comm">-@string.Format("{0:N2}", rurCommIis)</td>
                        <td class="td-cache-comm">-@string.Format("{0:N2}", rurCommVbr)</td>
                        <td class="td-cache">-@string.Format("{0:N2}", (rurCommIis + rurCommVbr))</td>
                    </tr>
                    <tr>
                        <td>=</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo - rurCommIis)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInVbrSaldo - rurCommVbr)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo + cacheInVbrSaldo - (rurCommIis + rurCommVbr))</td>
                    </tr>
                    <tr>
                        <td>Дивы:</td>
                        <td class="td-cache-divs">@string.Format("{0:N2}", rurDivsIis)</td>
                        <td class="td-cache-divs">@string.Format("{0:N2}", rurDivsVbr)</td>
                        <td class="td-cache-divs">@string.Format("{0:N2}", rurDivsIis + rurDivsVbr)</td>
                    </tr>
                    <tr>
                        <td>=</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo - rurCommIis + rurDivsIis)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInVbrSaldo - rurCommVbr + rurDivsVbr)</td>
                        <td class="td-cache">@string.Format("{0:N2}", (cacheInIisSaldo - rurCommIis + rurDivsIis) + (cacheInVbrSaldo - rurCommVbr + rurDivsVbr))</td>
                    </tr>
                    <tr>
                        <td>ndfl:</td>
                        <td class="td-cache">@string.Format("{0:N2}", rurNdflIis)</td>
                        <td class="td-cache">@string.Format("{0:N2}", rurNdflVbr)</td>
                        <td class="td-cache">@string.Format("{0:N2}", (rurNdflIis ?? 0) + (rurNdflVbr ?? 0))</td>
                    </tr>
                    <tr>
                        <td>usd buy:</td>
                        <td class="td-cache">@string.Format("{0:N2}", 0)</td>
                        <td class="td-cache">@string.Format("{0:N2}", usdBuyVbr)</td>
                        <td class="td-cache">@string.Format("{0:N2}", (0) + (rurNdflVbr ?? 0))</td>
                    </tr> 
                    <tr>
                        <td>usd sell:</td>
                        <td class="td-cache">@string.Format("{0:N2}", 0)</td>
                        <td class="td-cache">@string.Format("{0:N2}", usdSellVbr)</td>
                        <td class="td-cache">@string.Format("{0:N2}", (0) + (usdSellVbr ?? 0))</td>
                    </tr> 
                    <tr>
                        <td>=</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInIisSaldo - rurCommIis + rurDivsIis - rurNdflIis)</td>
                        <td class="td-cache">@string.Format("{0:N2}", cacheInVbrSaldo - rurCommVbr + rurDivsVbr - rurNdflVbr - (usdBuyVbr- usdSellVbr)) </td>
                        <td class="td-cache">@string.Format("{0:N2}", (cacheInIisSaldo - rurCommIis + rurDivsIis - rurNdflIis) + (cacheInVbrSaldo - rurCommVbr + rurDivsVbr - rurNdflVbr - (usdBuyVbr - usdSellVbr)))</td>
                    </tr>
                </table>
            </td>
            </tr>
            </table>
        </td>
        <td>
            <table class="tbl-usd-ex">
            <caption>Usd ex:</caption>
            <tr>
                <th style="color: navy; text-align: center; background-color: #f0f0f0;"></th>
                <th style="color: navy; text-align: center; background-color: #f0f0f0;">Итого</th>
            </tr>
            <tr>
                <td>>></td>
                <td style="text-align:right; font-weight: bold;">
                    @{
                        var totalUsdExch = Model.Operations
                            .Where(x => x.Type == OperationType.UsdExchange)
                            .Sum(x => x.Summa);
                        }
                        @string.Format("{0:N2}", totalUsdExch)
                </td>
            </tr>
            @{
                var usdExchangeOps = Model.Operations
                    .Where(x => x.Type == OperationType.UsdExchange)
                    .OrderByDescending(x => x.Date);

                foreach (var o in usdExchangeOps)
                {
                    <tr>
                        <td class="td-1">@string.Format("{0:dd.MM.yyyy}", o.Date)</td>
                        <td style="text-align: right;">@($"{o.Summa:N2}")</td>
                        @*<td class="td-lot" style="text-align: right; color:darkgreen; padding-left:10px;">@string.Format("{0:N2}", accountCacheInTotal)</td>*@
                    </tr>
                }
            }
            </table>
        </td>

        <td>
            <table>
            <caption>Cur. operations</caption>
            @foreach (var va in Model.VirtualAccounts)
            {
                <tr>
                    <td style="font-weight: bold; padding: 6px;">@va.Id</td>
                </tr>
                <tr>
                    <td>
                    @foreach (var a in Model.Accounts.Where(x => x.VirtualAccount == va))
                    {
                        Model.Account = a;
                        foreach (var cur in Model.Currencies)
                        {
                            Model.Cur = cur;
                            if (Model.CurBuyOps[new CacheViewModel.Item(cur, a.BitCode)].Sum(x => x.Qty).Value != 0
                                || Model.CurSellOps[new CacheViewModel.Item(cur, a.BitCode)].Sum(x => x.Qty).Value != 0)
                            {
                                await Html.RenderPartialAsync("CurOperation", Model);
                                <div style="max-height: 360px; overflow-y: auto;">
                                    @{await Html.RenderPartialAsync("CurOperationByAccTbl", Model);}
                                </div>
                            }
                        }
                    }
                    </td>
                </tr>
            }
            </table>
        </td>
    </tr>
</table>